//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Homon {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsUser : DataSet {
        
        private UserRightDataTable tableUserRight;
        
        public dsUser() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsUser(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserRight"] != null)) {
                    this.Tables.Add(new UserRightDataTable(ds.Tables["UserRight"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserRightDataTable UserRight {
            get {
                return this.tableUserRight;
            }
        }
        
        public override DataSet Clone() {
            dsUser cln = ((dsUser)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UserRight"] != null)) {
                this.Tables.Add(new UserRightDataTable(ds.Tables["UserRight"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUserRight = ((UserRightDataTable)(this.Tables["UserRight"]));
            if ((this.tableUserRight != null)) {
                this.tableUserRight.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsUser";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsUser.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUserRight = new UserRightDataTable();
            this.Tables.Add(this.tableUserRight);
        }
        
        private bool ShouldSerializeUserRight() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UserRightRowChangeEventHandler(object sender, UserRightRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRightDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUserName;
            
            private DataColumn columnUserPwd;
            
            private DataColumn columnUserRight;
            
            internal UserRightDataTable() : 
                    base("UserRight") {
                this.InitClass();
            }
            
            internal UserRightDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            internal DataColumn UserPwdColumn {
                get {
                    return this.columnUserPwd;
                }
            }
            
            internal DataColumn UserRightColumn {
                get {
                    return this.columnUserRight;
                }
            }
            
            public UserRightRow this[int index] {
                get {
                    return ((UserRightRow)(this.Rows[index]));
                }
            }
            
            public event UserRightRowChangeEventHandler UserRightRowChanged;
            
            public event UserRightRowChangeEventHandler UserRightRowChanging;
            
            public event UserRightRowChangeEventHandler UserRightRowDeleted;
            
            public event UserRightRowChangeEventHandler UserRightRowDeleting;
            
            public void AddUserRightRow(UserRightRow row) {
                this.Rows.Add(row);
            }
            
            public UserRightRow AddUserRightRow(string UserName, string UserPwd, string UserRight) {
                UserRightRow rowUserRightRow = ((UserRightRow)(this.NewRow()));
                rowUserRightRow.ItemArray = new object[] {
                        UserName,
                        UserPwd,
                        UserRight};
                this.Rows.Add(rowUserRightRow);
                return rowUserRightRow;
            }
            
            public UserRightRow FindByUserName(string UserName) {
                return ((UserRightRow)(this.Rows.Find(new object[] {
                            UserName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserRightDataTable cln = ((UserRightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserRightDataTable();
            }
            
            internal void InitVars() {
                this.columnUserName = this.Columns["UserName"];
                this.columnUserPwd = this.Columns["UserPwd"];
                this.columnUserRight = this.Columns["UserRight"];
            }
            
            private void InitClass() {
                this.columnUserName = new DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.columnUserPwd = new DataColumn("UserPwd", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserPwd);
                this.columnUserRight = new DataColumn("UserRight", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserRight);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnUserName}, true));
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.Unique = true;
            }
            
            public UserRightRow NewUserRightRow() {
                return ((UserRightRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserRightRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserRightRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRightRowChanged != null)) {
                    this.UserRightRowChanged(this, new UserRightRowChangeEvent(((UserRightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRightRowChanging != null)) {
                    this.UserRightRowChanging(this, new UserRightRowChangeEvent(((UserRightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRightRowDeleted != null)) {
                    this.UserRightRowDeleted(this, new UserRightRowChangeEvent(((UserRightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRightRowDeleting != null)) {
                    this.UserRightRowDeleting(this, new UserRightRowChangeEvent(((UserRightRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserRightRow(UserRightRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRightRow : DataRow {
            
            private UserRightDataTable tableUserRight;
            
            internal UserRightRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserRight = ((UserRightDataTable)(this.Table));
            }
            
            public string UserName {
                get {
                    return ((string)(this[this.tableUserRight.UserNameColumn]));
                }
                set {
                    this[this.tableUserRight.UserNameColumn] = value;
                }
            }
            
            public string UserPwd {
                get {
                    try {
                        return ((string)(this[this.tableUserRight.UserPwdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUserRight.UserPwdColumn] = value;
                }
            }
            
            public string UserRight {
                get {
                    try {
                        return ((string)(this[this.tableUserRight.UserRightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUserRight.UserRightColumn] = value;
                }
            }
            
            public bool IsUserPwdNull() {
                return this.IsNull(this.tableUserRight.UserPwdColumn);
            }
            
            public void SetUserPwdNull() {
                this[this.tableUserRight.UserPwdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserRightNull() {
                return this.IsNull(this.tableUserRight.UserRightColumn);
            }
            
            public void SetUserRightNull() {
                this[this.tableUserRight.UserRightColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRightRowChangeEvent : EventArgs {
            
            private UserRightRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserRightRowChangeEvent(UserRightRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserRightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
